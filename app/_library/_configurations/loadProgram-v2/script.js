// ===========================================
// SISTEMA MODULAR DE CARGA DE PROGRAMAS
// ===========================================
// Importa m√≥dulos organizados por responsabilidad

import { updateDisplay } from './modules/utils.js'
import { initializeApiClient } from './modules/api-client.js'
import { loadDataProgram } from './modules/program-processor.js'
import { DOMUpdater } from './modules/dom-updater.js'

const codProgram = configuration['codeProgram'] // Tomada de liferay

// ===========================================
// INICIALIZACI√ìN PRINCIPAL
// ===========================================

const initializeLoader = async () => {
  try {
    // Inicializar cliente API
    initializeApiClient()

    // Verificar disponibilidad de utilidades
    if (typeof StringUtils === 'undefined' || !StringUtils) {
      throw new Error('StringUtils no est√° disponible. Verificar carga de utilidades globales.')
    }

    // Validar c√≥digo de programa
    const isEmptyCode = StringUtils.isEmpty
      ? StringUtils.isEmpty(codProgram?.toString()?.trim())
      : !codProgram || codProgram.toString().trim().length === 0

    if (!codProgram || isEmptyCode) throw new Error('C√≥digo de programa no definido o vac√≠o')

    // Validar que sea un c√≥digo v√°lido (n√∫meros y letras)
    const cleanCode = codProgram.toString().replace(/[-_]/g, '')
    const isValidCode = StringUtils.isAlphanumeric ? StringUtils.isAlphanumeric(cleanCode) : /^[a-zA-Z0-9]+$/.test(cleanCode)
    if (!isValidCode) throw new Error(`C√≥digo de programa inv√°lido: ${codProgram}`)

    updateDisplay(`C√≥digo de programa: ${codProgram}`)
    await loadDataProgram(codProgram)
  } catch (error) {
    // Usar Logger si est√° disponible, sino console
    if (typeof Logger !== 'undefined' && Logger.error) {
      Logger.error('üí• Error al inicializar cargador:', error)
    } else {
      console.error('üí• Error al inicializar cargador:', error)
    }

    updateDisplay(`Error: ${error.message}`, true)

    // Limpiar cache en caso de error si DOMUpdater est√° disponible
    if (typeof DOMUpdater !== 'undefined' && DOMUpdater.clearCache) {
      DOMUpdater.clearCache()
    }
  }
}

// ===========================================
// CONFIGURACI√ìN ADICIONAL Y LISTENERS
// ===========================================

// Funci√≥n para inicializar listeners de la aplicaci√≥n
const initializeEventListeners = () => {
  // Cleanup cuando la p√°gina se descarga
  if (EventManager && EventManager.add) {
    EventManager.add(window, 'beforeunload', () => {
      DOMUpdater.clearCache()
      if (EventManager.cleanup) EventManager.cleanup()
    })
  } else {
    // Fallback b√°sico sin EventManager
    window.addEventListener('beforeunload', () => {
      DOMUpdater.clearCache()
    })
  }
}

// ===========================================
// EJECUCI√ìN PRINCIPAL
// ===========================================

// Ejecutar cuando el DOM est√© listo
DOMUtils.isReady(async () => {
  await initializeLoader()
  initializeEventListeners()

  // Configurar interceptors del API client despu√©s de la inicializaci√≥n
  const apiClient = window.apiClient
  if (apiClient && apiClient.addErrorInterceptor) {
    apiClient.addErrorInterceptor(async (error, config) => {
      Logger.error(`‚ùå API Error: ${config.method} ${config.url}`, error)
      throw error
    })
  }
})

// Exportar funciones principales para testing/debugging
if (typeof window !== 'undefined') {
  window.loadProgramUtils = {
    loadDataProgram,
    initializeLoader,
    updateDisplay
  }
}
