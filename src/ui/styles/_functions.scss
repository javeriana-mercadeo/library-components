@use 'sass:color';
@use 'sass:map';
@use 'sass:list';
@use './vars' as *;

// Medidas relativas
@function rem($pixels) {
  @return #{calc($pixels / $base-font-size)}rem;
}

// Conversión de HSL a RGB
@function hsl-to-rgb($color) {
  @return rgb(
    round(color.channel($color, 'red', $space: rgb)),
    round(color.channel($color, 'green', $space: rgb)),
    round(color.channel($color, 'blue', $space: rgb))
  );
}

// Función para invertir solo los valores de un mapa
@function invert-map($input-map) {
  $reversed-map: ();
  $keys: map.keys($input-map);
  $values: map.values($input-map);
  $reversed-values: ();

  @for $i from list.length($values) through 1 {
    $reversed-values: list.append($reversed-values, list.nth($values, $i));
  }

  @for $j from 1 through list.length($keys) {
    $key: list.nth($keys, $j);
    $value: list.nth($reversed-values, $j);
    $reversed-map: map.set($reversed-map, $key, $value);
  }

  @return $reversed-map;
}

// Generador de escala de colores (parametrizable)
@function generate-color-scale($base-color, $inverted: false) {
  $hue: color.channel($base-color, 'hue', $space: hsl);
  $saturation: color.channel($base-color, 'saturation', $space: hsl);
  $color-scale: ();

  $color-scale: map.set($color-scale, '', $base-color);

  @if $inverted {
    $lightness-steps: invert-map($lightness-steps);
    @each $step, $light in $lightness-steps {
      $hsl-color: hsl($hue, $saturation, $light);
      $color-value: hsl-to-rgb($hsl-color);
      $color-scale: map.set($color-scale, $step, $color-value);
    }
  } @else {
    @each $step, $light in $lightness-steps {
      $hsl-color: hsl($hue, $saturation, $light);
      $color-value: hsl-to-rgb($hsl-color);
      $color-scale: map.set($color-scale, $step, $color-value);
    }
  }

  @return $color-scale;
}

// Extractor de color de la base de colores
@function extract-color($color-name) {
  @return map.get($color-base, $color-name);
}
