// ==========================================
// FUNCIONES
// ==========================================
@use 'sass:color';
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'variables' as *;

// MEDIDAS RELATIVAS
// ----------------------------------------------------
// Función para convertir píxeles a rem
@function rem($pixels) {
  @return #{calc($pixels / $base-font-size)}rem;
}

// CONVERSIÓN DE COLORES
// ----------------------------------------------------
// Función para convertir un color HSL a RGB
@function hsl-to-rgb($color) {
  @return rgb(
    round(color.channel($color, 'red', $space: rgb)),
    round(color.channel($color, 'green', $space: rgb)),
    round(color.channel($color, 'blue', $space: rgb))
  );
}

// INVERSIÓN DE COLORES
// ----------------------------------------------------
// Función para invertir solo los valores de un mapa
@function invert-color-map($input-map) {
  $reversed-map: ();
  $keys: map.keys($input-map);
  $values: map.values($input-map);
  $reversed-values: ();

  @for $i from list.length($values) through 1 {
    $reversed-values: list.append($reversed-values, list.nth($values, $i));
  }

  @for $j from 1 through list.length($keys) {
    $key: list.nth($keys, $j);
    $value: list.nth($reversed-values, $j);
    $reversed-map: map.set($reversed-map, $key, $value);
  }

  @return $reversed-map;
}

// ESCALAS DE COLORES
// ----------------------------------------------------
// Generador de escala de colores (parametrizable)
@function generate-color-scale($base-color, $inverted: false) {
  $hue: color.channel($base-color, 'hue', $space: hsl);
  $saturation: color.channel($base-color, 'saturation', $space: hsl);
  $color-scale: ();

  $color-scale: map.set($color-scale, '', $base-color);

  @if $inverted {
    $lightness-steps: invert-color-map($lightness-steps);
    @each $step, $light in $lightness-steps {
      $hsl-color: hsl($hue, $saturation, $light);
      $color-value: hsl-to-rgb($hsl-color);
      $color-scale: map.set($color-scale, $step, $color-value);
    }
  } @else {
    @each $step, $light in $lightness-steps {
      $hsl-color: hsl($hue, $saturation, $light);
      $color-value: hsl-to-rgb($hsl-color);
      $color-scale: map.set($color-scale, $step, $color-value);
    }
  }

  @return $color-scale;
}

// EXTRACCIÓN DE COLORES
// ----------------------------------------------------
// Extractor de color de la base de colores
@function extract-color($color-name) {
  @return map.get($color-base, $color-name);
}

// LUMINANCIA
// ----------------------------------------------------
// Función para calcular la luminancia de un color
@function luminance($color) {
  $r: math.div(color.channel($color, 'red', $space: rgb), 255);
  $g: math.div(color.channel($color, 'green', $space: rgb), 255);
  $b: math.div(color.channel($color, 'blue', $space: rgb), 255);

  $values: ($r, $g, $b);
  $adjusted: ();

  @each $value in $values {
    $adjusted: list.append($adjusted, if($value <= 0.03928, math.div($value, 12.92), math.pow(math.div($value + 0.055, 1.055), 2.4)));
  }

  @return list.nth($adjusted, 1) * 0.2126 + list.nth($adjusted, 2) * 0.7152 + list.nth($adjusted, 3) * 0.0722;
}

// CONTRASTE DE TEXTO
// ----------------------------------------------------
// Función para determinar si el texto debe ser blanco o negro
@function text-contrast($background-color) {
  @if meta.type-of($background-color) != 'color' {
    @error "El valor `#{$background-color}` no es un color válido.";
  }

  $bg-luminance: luminance($background-color);
  $white-contrast: math.div(1 + 0.05, $bg-luminance + 0.05);
  $black-contrast: math.div($bg-luminance + 0.05, 0 + 0.05);

  // Si la luminancia del fondo es muy alta (> 0.85), forzamos el texto a ser negro
  @if $bg-luminance > 0.55 {
    @return var(--neutral-100);
  } @else {
    @return var(--neutral-1000);
  }
}

@function text-contrast-byVarName($background-color) {
  @if meta.type-of($background-color) != 'color' {
    // Determinar si el tema es oscuro o claro basado en el nombre de la variable
    @if string.index($background-color, '--neutral-') and string.index($background-color, '-100') {
      @return var(--neutral-1000);
    } @else if string.index($background-color, '-500') or string.index($background-color, '-800') {
      @return var(--neutral-100);
    } @else if string.index($background-color, '') {
      @return var(--neutral-100);
    } @else {
      @return var(--neutral-1000);
    }
  }

  // Para valores de color reales, usa el cálculo de luminancia
  $bg-luminance: luminance($background-color);

  @if $bg-luminance > 0.45 {
    @return var(--neutral-100);
  } @else {
    @return var(--neutral-1000);
  }
}

// FUNCIÓN PARA ACCEDER A LOS COLORES SEMÁNTICOS
// ------------------------------------------
// Permite usar los colores semánticos de forma programática
@function semantic-color($name) {
  @if map.has-key($semantic-colors, $name) {
    @return map.get($semantic-colors, $name);
  }

  @error "Color semántico '#{$name}' no encontrado en $semantic-colors";
}

// FUNCIÓN PARA ACCEDER A LOS COLORES DEL TEMA
// ------------------------------------------
// Permite usar los colores del tema de forma programática

@function deep-merge($map1, $map2) {
  $result: $map1;

  @each $key, $value in $map2 {
    $existing: map.get($result, $key);

    $new-value: if(
      meta.type-of($existing) == 'map' and meta.type-of($value) == 'map',
      deep-merge($existing, $value),
      // merge recursivo
      $value
    );

    $result: map.merge(
      $result,
      (
        $key: $new-value
      )
    );
  }

  @return $result;
}
