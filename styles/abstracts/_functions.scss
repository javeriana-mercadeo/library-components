// ==========================================
// FUNCIONES
// ==========================================
@use 'sass:color';
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'variables' as *;

// ==========================================
// MEDIDAS
// ==========================================
@function rem($pixels) {
  @return #{calc($pixels / $base-font-size)}rem;
}

// ==========================================
// COLORES - CONVERSIÓN
// ==========================================
@function color-to-rgb($color) {
  @return #{color.channel($color, 'red', $space: rgb)}, #{color.channel($color, 'green', $space: rgb)},
    #{color.channel($color, 'blue', $space: rgb)};
}

@function hsl-to-rgb($color) {
  @return rgb(
    round(color.channel($color, 'red', $space: rgb)),
    round(color.channel($color, 'green', $space: rgb)),
    round(color.channel($color, 'blue', $space: rgb))
  );
}

// ==========================================
// COLORES - INVERSIÓN
// ==========================================
@function invert-color-map($input-map) {
  @if $input-map == null {
    @error "invert-color-map(): $input-map no puede ser null";
  }
  @if meta.type-of($input-map) != 'map' {
    @error "invert-color-map(): $input-map debe ser un mapa";
  }

  $reversed-map: ();
  $empty-key-value: null;

  // Guardar clave vacía si existe
  @if map.has-key($input-map, '') {
    $empty-key-value: map.get($input-map, '');
  }

  // Crear listas excluyendo clave vacía
  $filtered-keys: ();
  $filtered-values: ();

  @each $key, $value in $input-map {
    @if $key != '' {
      $filtered-keys: list.append($filtered-keys, $key);
      $filtered-values: list.append($filtered-values, $value);
    }
  }

  // Invertir valores
  $reversed-values: ();
  @for $i from list.length($filtered-values) through 1 {
    $reversed-values: list.append($reversed-values, list.nth($filtered-values, $i));
  }

  // Crear mapa invertido
  @for $j from 1 through list.length($filtered-keys) {
    $key: list.nth($filtered-keys, $j);
    $value: list.nth($reversed-values, $j);
    $reversed-map: map.set($reversed-map, $key, $value);
  }

  // Restaurar clave vacía
  @if $empty-key-value != null {
    $reversed-map: map.set($reversed-map, '', $empty-key-value);
  }

  @return $reversed-map;
}

// ==========================================
// COLORES - ESCALAS
// ==========================================
@function generate-color-scale($base-color, $inverted: false) {
  $hue: color.channel($base-color, 'hue', $space: hsl);
  $saturation: color.channel($base-color, 'saturation', $space: hsl);
  $color-scale: ();

  // Color base
  $color-scale: map.set($color-scale, '', $base-color);
  $color-scale: map.set($color-scale, 'rgb', color-to-rgb($base-color));

  $steps: if($inverted, invert-color-map($lightness-steps), $lightness-steps);

  @each $step, $light in $steps {
    $hsl-color: hsl($hue, $saturation, $light);
    $color-value: hsl-to-rgb($hsl-color);
    $color-scale: map.set($color-scale, $step, $color-value);
    $color-scale: map.set($color-scale, '#{$step}-rgb', color-to-rgb($color-value));
  }

  @return $color-scale;
}

@function add-rgb-to-color-map($color-map) {
  $map-with-rgb: ();

  @each $variant, $color in $color-map {
    $map-with-rgb: map.set($map-with-rgb, $variant, $color);

    @if $variant != '' {
      $map-with-rgb: map.set($map-with-rgb, '#{$variant}-rgb', color-to-rgb($color));
    } @else {
      $map-with-rgb: map.set($map-with-rgb, 'rgb', color-to-rgb($color));
    }
  }

  @return $map-with-rgb;
}

// ==========================================
// COLORES - CONTRASTE
// ==========================================
@function luminance($color) {
  $r: math.div(color.channel($color, 'red', $space: rgb), 255);
  $g: math.div(color.channel($color, 'green', $space: rgb), 255);
  $b: math.div(color.channel($color, 'blue', $space: rgb), 255);

  $values: ($r, $g, $b);
  $adjusted: ();

  @each $value in $values {
    $adjusted: list.append($adjusted, if($value <= 0.03928, math.div($value, 12.92), math.pow(math.div($value + 0.055, 1.055), 2.4)));
  }

  @return list.nth($adjusted, 1) * 0.2126 + list.nth($adjusted, 2) * 0.7152 + list.nth($adjusted, 3) * 0.0722;
}

@function text-contrast($background-color) {
  @if meta.type-of($background-color) != 'color' {
    @error "El valor `#{$background-color}` no es un color válido.";
  }

  $bg-luminance: luminance($background-color);

  @return if($bg-luminance > 0.55, var(--neutral-100), var(--neutral-1000));
}

// ==========================================
// UTILIDADES
// ==========================================
@function extract-color($color-name) {
  @return map.get($color-base, $color-name);
}

@function deep-merge($map1, $map2) {
  $result: $map1;

  @each $key, $value in $map2 {
    $existing: map.get($result, $key);
    $new-value: if(meta.type-of($existing) == 'map' and meta.type-of($value) == 'map', deep-merge($existing, $value), $value);
    $result: map.merge(
      $result,
      (
        $key: $new-value
      )
    );
  }

  @return $result;
}
